generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement())
  username         String           @unique
  email            String           @unique
  passwordHash     String
  karma            Int              @default(0)
  avatarUrl        String?
  createdAt        DateTime         @default(now())
  lastLogin        DateTime?
  posts            Post[]
  comments         Comment[]
  votes            Vote[]
  userPreferences  UserPreferences?
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  icon      String?
  color     String?
  postCount Int      @default(0)
  createdAt DateTime @default(now())
  posts     Post[]
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  categoryId Int
  category  Category  @relation(fields: [categoryId], references: [id])
  votes     Int       @default(0)
  viewCount Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  tags      PostTag[]
  postVotes Vote[]
}

model Comment {
  id              Int       @id @default(autoincrement())
  content         String
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  postId          Int
  post            Post      @relation(fields: [postId], references: [id])
  parentCommentId Int?
  parentComment   Comment?  @relation("CommentToComment", fields: [parentCommentId], references: [id])
  childComments   Comment[] @relation("CommentToComment")
  votes           Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  commentVotes    Vote[]
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  posts     PostTag[]
}

model PostTag {
  postId Int
  post   Post @relation(fields: [postId], references: [id])
  tagId  Int
  tag    Tag  @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Vote {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  postId    Int?
  post      Post?    @relation(fields: [postId], references: [id])
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  voteType  Int      @db.SmallInt // 1 for upvote, -1 for downvote
  createdAt DateTime @default(now())

  @@check(((postId IS NOT NULL) AND (commentId IS NULL)) OR ((postId IS NULL) AND (commentId IS NOT NULL)))
}

model UserPreferences {
  id                 Int      @id @default(autoincrement())
  userId            Int      @unique
  user              User     @relation(fields: [userId], references: [id])
  theme             String   @default("light")
  emailNotifications Boolean  @default(true)
  displayName       String?
  bio               String?
  updatedAt         DateTime @default(now())
}